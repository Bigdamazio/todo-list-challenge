name: CI

on:
  pull_request:
  push:
    branches: [ main ]

jobs:
  scan_ruby:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Scan for common Rails security vulnerabilities using static analysis
        run: bin/brakeman --no-pager

  scan_js:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Scan for security vulnerabilities in JavaScript dependencies
        run: bin/importmap audit

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Lint code for consistent style
        run: bin/rubocop -f github

  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: todo_list_challenge_test
        ports:
          - 5432:5432
        options: --health-cmd="pg_isready -U postgres -d todo_list_challenge_test" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Install system packages
        run: sudo apt-get update && sudo apt-get install --no-install-recommends -y build-essential git libpq-dev libyaml-dev pkg-config google-chrome-stable

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby environment
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Wait for PostgreSQL service to be fully ready
        run: |
          echo "Waiting for PostgreSQL to be ready..."
          sleep 15
          echo "PostgreSQL should be ready now."

      - name: Create PostgreSQL Schemas and Enable Supabase-related Extensions
        run: |
          echo "Creating necessary PostgreSQL schemas and enabling extensions..."
          # Usando as variáveis de ambiente definidas abaixo para se conectar ao psql
          PGPASSWORD=$POSTGRES_PASSWORD psql \
            -h $PGHOST \
            -p $PGPORT \
            -U $PGUSER \
            -d $PGDATABASE <<EOF
            CREATE SCHEMA IF NOT EXISTS auth;
            CREATE SCHEMA IF NOT EXISTS extensions;
            CREATE SCHEMA IF NOT EXISTS graphql;
            CREATE SCHEMA IF NOT EXISTS graphql_public;
            CREATE SCHEMA IF NOT EXISTS pgbouncer;
            CREATE SCHEMA IF NOT EXISTS realtime;
            CREATE SCHEMA IF NOT EXISTS storage;
            CREATE SCHEMA IF NOT EXISTS vault;

            CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" SCHEMA extensions;
            CREATE EXTENSION IF NOT EXISTS "pgcrypto" SCHEMA extensions;
            CREATE EXTENSION IF NOT EXISTS "uuid-ossp" SCHEMA extensions;
            CREATE EXTENSION IF NOT EXISTS "pg_graphql" SCHEMA graphql;
            CREATE EXTENSION IF NOT EXISTS "plpgsql" SCHEMA pg_catalog;
            -- CREATE EXTENSION IF NOT EXISTS "supabase_vault" SCHEMA vault;
            EOF
          echo "PostgreSQL schemas and extensions processed."
        env:
          # Variáveis de ambiente que SÃO LITERAIS ou referenciam diretamente o SERVICE.
          # Estes valores serão usados pelo comando psql DENTRO DESTE PASSO.
          PGHOST: localhost # Quando o serviço está no mesmo host, 'localhost' funciona.
          PGPORT: 5432
          PGUSER: ${{ services.postgres.env.POSTGRES_USER }}
          PGPASSWORD: ${{ services.postgres.env.POSTGRES_PASSWORD }}
          PGDATABASE: ${{ services.postgres.env.POSTGRES_DB }}

      - name: Run database migrations
        env:
          RAILS_ENV: test
          # A DATABASE_URL também precisa usar as variáveis de ambiente locais ou literais.
          DATABASE_URL: postgres://${{ services.postgres.env.POSTGRES_USER }}:${{ services.postgres.env.POSTGRES_PASSWORD }}@localhost:5432/${{ services.postgres.env.POSTGRES_DB }}
        run: bin/rails db:migrate

      - name: Run tests
        env:
          RAILS_ENV: test
          DATABASE_URL: postgres://${{ services.postgres.env.POSTGRES_USER }}:${{ services.postgres.env.POSTGRES_PASSWORD }}@localhost:5432/${{ services.postgres.env.POSTGRES_DB }}
        run: bin/rails db:test:prepare test test:system

      - name: Keep screenshots from failed system tests
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: screenshots
          path: ${{ github.workspace }}/tmp/screenshots
          if-no-files-found: ignore
